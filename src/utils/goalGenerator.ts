
import { RunData } from "@/types/run";
import { GoalData } from "@/types/goal";

/**
 * Calculate pace in seconds per kilometer
 */
export const calculatePace = (distance: number, duration: number): number => {
  if (distance <= 0) return 0;
  return duration / distance; // seconds per kilometer
};

/**
 * Generate a new goal based on the latest run
 */
export const generateGoalFromRun = (latestRun: RunData, userId: string): GoalData => {
  // Calculate new target distance (10% more)
  const targetDistance = latestRun.distance * 1.1;
  
  // Calculate current pace
  const currentPace = calculatePace(latestRun.distance, latestRun.duration);
  
  // Calculate target pace (10% faster = 90% of current pace)
  const targetPace = currentPace * 0.9;
  
  // Set target date (7 days from latest run)
  const targetDate = new Date(latestRun.date);
  targetDate.setDate(targetDate.getDate() + 7);
  
  // Generate a new goal
  return {
    id: `goal-${Date.now()}`, // In a real app, this would be generated by the database
    userId,
    targetDate,
    targetDistance,
    targetPace,
    status: 'Active',
    autoGenerated: true,
    createdAt: new Date(),
  };
};

/**
 * Check if a user has an active goal
 */
export const hasActiveGoal = (userGoals: GoalData[]): boolean => {
  return userGoals.some(goal => goal.status === 'Active');
};

/**
 * Get the latest completed run
 */
export const getLatestCompletedRun = (userRuns: RunData[]): RunData | null => {
  const completedRuns = userRuns.filter(run => run.status === 'Completed');
  
  if (completedRuns.length === 0) {
    return null;
  }
  
  return completedRuns.sort((a, b) => {
    return new Date(b.date).getTime() - new Date(a.date).getTime();
  })[0];
};

/**
 * Main function to check and process automatic goal generation
 */
export const processAutomaticGoalGeneration = (
  userId: string,
  userRuns: RunData[],
  userGoals: GoalData[]
): GoalData | null => {
  // Check if the user already has an active goal
  if (hasActiveGoal(userGoals)) {
    console.log("User already has an active goal. Skipping goal generation.");
    return null;
  }
  
  // Get the latest completed run
  const latestRun = getLatestCompletedRun(userRuns);
  
  // If no completed runs, we can't generate a goal
  if (!latestRun) {
    console.log("No completed runs found. Cannot generate a goal.");
    return null;
  }
  
  // Generate and return a new goal
  const newGoal = generateGoalFromRun(latestRun, userId);
  console.log("Generated new automatic goal:", newGoal);
  
  return newGoal;
};
