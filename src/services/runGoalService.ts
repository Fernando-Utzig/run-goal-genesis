
import { RunData } from "@/types/run";
import { GoalData } from "@/types/goal";

/**
 * In a real app, these functions would interact with your database or API.
 * For now, they're just placeholders to demonstrate the functionality.
 */

// Simulate fetching runs for a user from a database
export const fetchUserRuns = async (userId: string): Promise<RunData[]> => {
  // This would be an API call in a real application
  console.log(`Fetching runs for user ${userId}`);
  
  // For now, return an empty array
  return [];
};

// Simulate fetching goals for a user from a database
export const fetchUserGoals = async (userId: string): Promise<GoalData[]> => {
  // This would be an API call in a real application
  console.log(`Fetching goals for user ${userId}`);
  
  // For now, return an empty array
  return [];
};

// Simulate saving a new goal to the database
export const saveGoal = async (goal: GoalData): Promise<GoalData> => {
  // This would be an API call in a real application
  console.log(`Saving goal for user ${goal.userId}`, goal);
  
  // Return the goal with a simulated database ID
  return {
    ...goal,
    id: `goal-${Date.now()}` // In a real app, this would be generated by the database
  };
};

// Simulate completing a run and triggering goal generation
export const completeRun = async (
  runId: string, 
  userId: string
): Promise<{ run: RunData; generatedGoal: GoalData | null }> => {
  // In a real app, this would update the run status in the database
  console.log(`Completing run ${runId} for user ${userId}`);
  
  // 1. Fetch current runs
  const runs = await fetchUserRuns(userId);
  
  // 2. Update the completed run status
  const updatedRun: RunData = {
    id: runId,
    userId,
    date: new Date(),
    distance: 5, // Sample data
    duration: 1800, // 30 minutes in seconds
    status: 'Completed'
  };
  
  // 3. Fetch current goals
  const goals = await fetchUserGoals(userId);
  
  // 4. Check if we need to generate a new goal
  let generatedGoal: GoalData | null = null;
  
  const hasActiveGoal = goals.some(goal => goal.status === 'Active');
  
  if (!hasActiveGoal) {
    // Calculate target values based on the completed run
    const targetDistance = updatedRun.distance * 1.1;
    const currentPace = updatedRun.duration / updatedRun.distance;
    const targetPace = currentPace * 0.9;
    
    // Set target date (7 days from completion)
    const targetDate = new Date();
    targetDate.setDate(targetDate.getDate() + 7);
    
    // Create new goal
    const newGoal: GoalData = {
      id: `goal-${Date.now()}`,
      userId,
      targetDate,
      targetDistance,
      targetPace,
      status: 'Active',
      autoGenerated: true,
      createdAt: new Date()
    };
    
    // Save the new goal
    generatedGoal = await saveGoal(newGoal);
    console.log("Automatically generated new goal:", generatedGoal);
  }
  
  return {
    run: updatedRun,
    generatedGoal
  };
};
