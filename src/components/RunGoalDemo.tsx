
import { useState, useEffect, useCallback } from 'react';
import { RunData } from '@/types/run';
import { GoalData } from '@/types/goal';
import { supabase } from '@/lib/supabase';
import { toast } from 'sonner';
import { RunsList } from './runs/RunsList';
import { GoalsList } from './goals/GoalsList';
import { RunCompletionHandler } from './RunCompletionHandler';

export function RunGoalDemo() {
  const [userId] = useState('user-1');
  const [runs, setRuns] = useState<RunData[]>([]);
  const [goals, setGoals] = useState<GoalData[]>([]);
  const [loading, setLoading] = useState(true);

  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      
      const { data: runsData, error: runsError } = await supabase
        .from('runs')
        .select('*')
        .eq('user_id', userId)
        .order('date', { ascending: false });
        
      if (runsError) {
        console.error('Error fetching runs:', runsError);
        toast.error('Error loading runs');
        return;
      }

      const { data: goalsData, error: goalsError } = await supabase
        .from('goals')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (goalsError) {
        console.error('Error fetching goals:', goalsError);
        toast.error('Error loading goals');
        return;
      }

      // Map database records to our application types
      setRuns(runsData.map(run => ({
        id: run.id,
        userId: run.user_id,
        date: new Date(run.date),
        distance: run.distance,
        duration: run.duration,
        notes: run.notes,
        status: run.status
      })));

      setGoals(goalsData.map(goal => ({
        id: goal.id,
        userId: goal.user_id,
        targetDate: new Date(goal.target_date),
        targetDistance: goal.target_distance,
        targetPace: goal.target_pace,
        status: goal.status,
        autoGenerated: goal.auto_generated,
        createdAt: new Date(goal.created_at)
      })));
    } catch (error) {
      console.error('Failed to load data:', error);
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  const handleDeleteRun = async (runId: string) => {
    try {
      const { error } = await supabase
        .from('runs')
        .delete()
        .eq('id', runId);

      if (error) throw error;

      setRuns(prev => prev.filter(run => run.id !== runId));
      toast.success('Run deleted successfully');
    } catch (error) {
      console.error('Error deleting run:', error);
      toast.error('Failed to delete run');
    }
  };

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Your Running Journey</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <RunsList 
          runs={runs} 
          loading={loading} 
          onDeleteRun={handleDeleteRun} 
        />
        <GoalsList 
          goals={goals} 
          loading={loading} 
        />
      </div>
      
      <RunCompletionHandler
        userId={userId}
        runs={runs}
        goals={goals}
        onGoalSaved={loadData}
      />
    </div>
  );
}
